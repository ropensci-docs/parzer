[{"path":[]},{"path":"https://docs.ropensci.org/parzer/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/parzer/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/parzer.git Make sure track progress upstream (.e., version parzer ropensci/parzer) git remote add upstream https://github.com/ropensci/parzer.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs Push account Submit pull request home base ropensci/parzer","code":""},{"path":[]},{"path":"https://docs.ropensci.org/parzer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"Introduction to the parzer package","text":"Stable version Development version","code":"install.packages(\"parzer\") remotes::install_github(\"ropensci/parzer\")"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"parse","dir":"Articles","previous_headings":"","what":"parse","title":"Introduction to the parzer package","text":"","code":"library(\"parzer\")"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"latitudes","dir":"Articles","previous_headings":"parse","what":"latitudes","title":"Introduction to the parzer package","text":"","code":"parse_lat(\"45N54.2356\") #> [1] 45.90393 parse_lat(\"-45.98739874\") #> [1] -45.9874 parse_lat(\"40.123°\") #> [1] 40.123 parse_lat(\"40.123N\") #> [1] 40.123 parse_lat(\"N45 04.25764\") #> [1] 45.07096  # bad values -> NaN parse_lat(\"191.89\") #> Warning in pz_parse_lat(lat): not within -90/90 range, got: 191.89 #>   check that you did not invert lon and lat #> [1] NaN  # many inputs x <- c(\"40.123°\", \"40.123N74.123W\", \"191.89\", 12, \"N45 04.25764\") parse_lat(x) #> Warning in pz_parse_lat(lat): invalid characters, got: 40.123n74.123w  #> Warning in pz_parse_lat(lat): not within -90/90 range, got: 191.89 #>   check that you did not invert lon and lat #> [1] 40.12300      NaN      NaN 12.00000 45.07096  # parse_lat(\"N455698735\", \"HDDMMmmmmm\") # custom formats not ready yet"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"longitudes","dir":"Articles","previous_headings":"parse","what":"longitudes","title":"Introduction to the parzer package","text":"","code":"parse_lon(\"45W54.2356\") #> [1] -45.90393 parse_lon(\"-45.98739874\") #> [1] -45.9874 parse_lon(\"40.123°\") #> [1] 40.123 parse_lon(\"74.123W\") #> [1] -74.123 parse_lon(\"W45 04.25764\") #> [1] -45.07096  # bad values parse_lon(\"361\") #> Warning in pz_parse_lon(lon): not within -180/360 range, got: 361 #> [1] NaN  # many inputs x <- c(\"45W54.2356\", \"181\", 45, 45.234234, \"-45.98739874\") parse_lon(x) #> [1] -45.90393 181.00000  45.00000  45.23423 -45.98740  # parse_lon(\"N455698735\", \"HDDMMmmmmm\") # custom formats not ready yet"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"both-lon-and-lat-together","dir":"Articles","previous_headings":"parse","what":"both lon and lat together","title":"Introduction to the parzer package","text":"","code":"lons <- c(\"45W54.2356\", \"181\", 45, 45.234234, \"-45.98739874\") lats <- c(\"40.123°\", \"40.123N\", \"191.89\", 12, \"N45 04.25764\") parse_lon_lat(lons, lats) #>         lon      lat #> 1 -45.90393 40.12300 #> 2 181.00000 40.12300 #> 3  45.00000      NaN #> 4  45.23423 12.00000 #> 5 -45.98740 45.07096"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"parse-into-degree-min-sec-parts","dir":"Articles","previous_headings":"parse","what":"parse into degree, min, sec parts","title":"Introduction to the parzer package","text":"","code":"parse_parts_lat(\"45N54.2356\") #>   deg min      sec #> 1  45  54 14.13674 parse_parts_lon(\"-74.6411133\") #>   deg min      sec #> 1 -74  38 28.00784 # many inputs x <- c(\"40.123°\", \"40.123N74.123W\", \"191.89\", 12, \"N45 04.25764\") parse_parts_lon(x) #>   deg min      sec #> 1  40   7 22.80395 #> 2  NA  NA      NaN #> 3 191  53 23.99783 #> 4  12   0  0.00000 #> 5  NA  NA      NaN"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"get-hemisphere-from-latlon-coords","dir":"Articles","previous_headings":"parse","what":"get hemisphere from lat/lon coords","title":"Introduction to the parzer package","text":"","code":"parse_hemisphere(\"74.123E\", \"45N54.2356\") #> [1] \"NE\" parse_hemisphere(\"-120\", \"40.4183318\") #> [1] \"NW\" parse_hemisphere(\"-120\", \"-40.4183318\") #> [1] \"SW\" parse_hemisphere(\"120\", \"-40.4183318\") #> [1] \"SE\""},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"get-degree-minutes-or-seconds-separately","dir":"Articles","previous_headings":"parse","what":"get degree, minutes, or seconds separately","title":"Introduction to the parzer package","text":"","code":"coords <- c(45.23323, \"40:25:6N\", \"40° 25´ 5.994\\\" N\") pz_degree(lat = coords) #> [1] 45 40 40 pz_minute(lat = coords) #> [1] 13 25 25 pz_second(lat = coords) #> [1] 59.630119  6.005895  5.992162  coords <- c(15.23323, \"40:25:6E\", \"192° 25´ 5.994\\\" E\") pz_degree(lon = coords) #> [1]  15  40 192 pz_minute(lon = coords) #> [1] 13 25 25 pz_second(lon = coords) #> [1] 59.626686  6.005895  6.005895"},{"path":"https://docs.ropensci.org/parzer/articles/parzer.html","id":"add-or-subtract-degrees-minutes-or-seconds","dir":"Articles","previous_headings":"parse","what":"add or subtract degrees, minutes, or seconds","title":"Introduction to the parzer package","text":"","code":"pz_d(31) #> 31 pz_d(31) + pz_m(44) #> 31.73333 pz_d(31) - pz_m(44) #> 30.26667 pz_d(31) + pz_m(44) + pz_s(59) #> 31.74972 pz_d(-121) + pz_m(1) + pz_s(33) #> -120.9742"},{"path":"https://docs.ropensci.org/parzer/articles/use_cases.html","id":"use-case-working-with-spatial-r-packages","dir":"Articles","previous_headings":"","what":"Use case: working with spatial R packages","title":"parzer use cases","text":"One may find clean messy coordinates part project/work/etc. look fit workflow going way visualization? Let’s say following messy coordinates ’ve compiled different places, leading variety messy formats: Parse messy coordinates Combine coordinates data Coerce sf object Calculate center plot view Plot data using leaflet package ’d like data certain area, e.g., political boundary park boundary. can clip data bounding box using sf::st_crop(). First, define bounding box, visualize Crop data bounding box Plot new data","code":"library(\"parzer\") if (!requireNamespace(\"sf\")) install.packages(\"sf\") library(\"sf\") lats <- c(   \"46.4183\",   \"46.4383° N\",   \"46.5683° N\",   \"46° 27´ 5.4\\\" N\",   \"46° 25.56’\",   \"N46°24’4.333\" ) lons <- c(   \"25.7391\",   \"E25°34’6.4533\",   \"25.3391° E\",   \"25.8391° E\",   \"25° 35.56’\",   \"E25°34’4.333\" ) dat <- tibble::tibble(   longitude = parse_lon(lons),   latitude = parse_lat(lats) ) dat #> # A tibble: 6 × 2 #>   longitude latitude #>       <dbl>    <dbl> #> 1      25.7     46.4 #> 2      25.6     46.4 #> 3      25.3     46.6 #> 4      25.8     46.5 #> 5      25.6     46.4 #> 6      25.6     46.4 dat$shape <- c(\"round\", \"square\", \"triangle\", \"round\", \"square\", \"square\") dat$color <- c(\"blue\", \"yellow\", \"green\", \"red\", \"green\", \"yellow\") dat #> # A tibble: 6 × 4 #>   longitude latitude shape    color  #>       <dbl>    <dbl> <chr>    <chr>  #> 1      25.7     46.4 round    blue   #> 2      25.6     46.4 square   yellow #> 3      25.3     46.6 triangle green  #> 4      25.8     46.5 round    red    #> 5      25.6     46.4 square   green  #> 6      25.6     46.4 square   yellow datsf <- sf::st_as_sf(dat, coords = c(\"longitude\", \"latitude\")) datsf #> Simple feature collection with 6 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 25.3391 ymin: 46.4012 xmax: 25.8391 ymax: 46.5683 #> CRS:           NA #> # A tibble: 6 × 3 #>   shape    color            geometry #>   <chr>    <chr>             <POINT> #> 1 round    blue    (25.7391 46.4183) #> 2 square   yellow (25.56846 46.4383) #> 3 triangle green   (25.3391 46.5683) #> 4 round    red     (25.8391 46.4515) #> 5 square   green   (25.59267 46.426) #> 6 square   yellow (25.56787 46.4012) center_lon <- mean(dat$longitude) center_lat <- mean(dat$latitude) if (!requireNamespace(\"leaflet\")) install.packages(\"leaflet\") library(\"leaflet\") leaflet() %>%   addTiles() %>%   addMarkers(data = datsf) %>%   setView(center_lon, center_lat, zoom = 10) bbox <- c(   xmin = 25.42813, ymin = 46.39455,   xmax = 25.68769, ymax = 46.60346 ) leaflet() %>%   addTiles() %>%   addRectangles(bbox[[\"xmin\"]], bbox[[\"ymin\"]], bbox[[\"xmax\"]], bbox[[\"ymax\"]]) %>%   setView(center_lon, center_lat, zoom = 10) datsf_c <- st_crop(datsf, bbox) leaflet() %>%   addTiles() %>%   addMarkers(data = datsf_c) %>%   setView(center_lon, center_lat, zoom = 10)"},{"path":"https://docs.ropensci.org/parzer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Alban Sagouis. Author, maintainer. Alec L. Robitaille. Contributor. Maëlle Salmon. Contributor. Hiroaki Yutani. Contributor. Jeffrey Bogan. Contributor.            C++ code originally Jeffrey Bogan,         completely re-written Julien Brun. Reviewer.            Julien Brun reviewed package,         see https://github.com/ropensci/onboarding/issues/341 Maria Munafó. Reviewer.            Maria Munafó reviewed package,         see https://github.com/ropensci/onboarding/issues/341 . Funder.            https://ropensci.org","code":""},{"path":"https://docs.ropensci.org/parzer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Sagouis (2024). parzer: Parse Messy Geographic Coordinates. R package version 0.4.1.9001https://github.com/ropensci/parzer (devel) https://docs.ropensci.org/parzer/ (docs), https://github.com/ropensci/parzer (devel)https://docs.ropensci.org/parzer/ (docs).","code":"@Manual{,   title = {parzer: Parse Messy Geographic Coordinates},   author = {Scott Chamberlain and Alban Sagouis},   year = {2024},   note = {R package version 0.4.1.9001https://github.com/ropensci/parzer (devel) https://docs.ropensci.org/parzer/ (docs)},   url = {https://github.com/ropensci/parzer (devel) https://docs.ropensci.org/parzer/ (docs)}, }"},{"path":"https://docs.ropensci.org/parzer/index.html","id":"parzer","dir":"","previous_headings":"","what":"Parse Messy Geographic Coordinates","title":"Parse Messy Geographic Coordinates","text":"parzer parses messy geographic coordinates Docs: https://docs.ropensci.org/parzer/ may get data published study colleague coordinates messy character format ’d like clean get decimal degree numeric data. parzer API: parse_hemisphere parse_lat parse_llstr parse_lon parse_lon_lat parse_parts_lat parse_parts_lon pz_d pz_degree pz_m pz_minute pz_s pz_second","code":""},{"path":"https://docs.ropensci.org/parzer/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Parse Messy Geographic Coordinates","text":"example, parse latitude longitude messy character vectors. can even split parse strings contain latitude longitude together. See Introduction parzer package vignette.","code":"parse_lat(c(\"45N54.2356\", \"-45.98739874\", \"40.123°\")) #> [1]  45.90393 -45.98740  40.12300 parse_lon(c(\"45W54.2356\", \"-45.98739874\", \"40.123°\")) #> [1] -45.90393 -45.98740  40.12300 parse_llstr(c(\"4 51'36\\\"S, 101 34'7\\\"W\", \"40.123°; 45W54.2356\")) #>      lat        lon #> 1 -4.860 -101.56861 #> 2 40.123  -45.90393"},{"path":"https://docs.ropensci.org/parzer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parse Messy Geographic Coordinates","text":"Stable version Development version","code":"install.packages(\"parzer\") remotes::install_github(\"ropensci/parzer\") library(\"parzer\")"},{"path":"https://docs.ropensci.org/parzer/index.html","id":"similar-art","dir":"","previous_headings":"","what":"Similar art","title":"Parse Messy Geographic Coordinates","text":"sp::char2dms: similar parzer::parse_lat parzer::parse_lon. However, sp::char2dms specify termination character degree, minutes seconds. parzer user. biogeo::dms2dd: unlike functions package. must pass separate degrees, minutes, seconds direction dms2dd. exact analog found parzer, whose main focus parsing messy geographic coordinates strings machine readable version","code":""},{"path":"https://docs.ropensci.org/parzer/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Parse Messy Geographic Coordinates","text":"Please report issues bugs. License: MIT Get citation information parzer R citation(package = 'parzer') Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":null,"dir":"Reference","previous_headings":"","what":"extract degree, minutes, and seconds — dms","title":"extract degree, minutes, and seconds — dms","text":"extract degree, minutes, seconds","code":""},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract degree, minutes, and seconds — dms","text":"","code":"pz_degree(lon = NULL, lat = NULL)  pz_minute(lon = NULL, lat = NULL)  pz_second(lon = NULL, lat = NULL)  # S3 method for pz print(x, ...)  pz_d(x)  pz_m(x)  pz_s(x)  # S3 method for pz +(e1, e2)  # S3 method for pz -(e1, e2)  # S3 method for pz /(e1, e2)  # S3 method for pz *(e1, e2)"},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract degree, minutes, and seconds — dms","text":"lon, lat (numeric/integer/character) one longitude latitude values. values internally validated. one lon lat accepted x (integer) integer representing degree, minute second ... print dots e1, e2 objects class pz, using pz_d(), pz_m(), pz_s()","code":""},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract degree, minutes, and seconds — dms","text":"pz_degree: integer, pz_minute: integer, pz_second: numeric, pz_d: numeric, pz_m: numeric, pz_s: numeric (adding/subtracting also gives numeric)","code":""},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"extract degree, minutes, and seconds — dms","text":"Mathematics operators exported +, -, /, *, / * exported stop message say supported; otherwise allow divide degrees minutes, leading nonsense.","code":""},{"path":"https://docs.ropensci.org/parzer/reference/dms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extract degree, minutes, and seconds — dms","text":"","code":"# extract parts of a coordinate value pz_degree(-45.23323) #> [1] -45 pz_minute(-45.23323) #> [1] 13 pz_second(-45.23323) #> [1] 59.63012  pz_degree(lon = 178.23423) #> [1] 178 pz_minute(lon = 178.23423) #> [1] 14 pz_second(lon = 178.23423) #> [1] 3.20068 if (FALSE) { pz_degree(lat = c(45.23323, \"40:25:6N\", \"40° 25´ 5.994 S\")) pz_minute(lat = c(45.23323, \"40:25:6N\", \"40° 25´ 5.994 S\")) pz_second(lat = c(45.23323, \"40:25:6N\", \"40° 25´ 5.994 S\"))  # invalid pz_degree(445.23323)  # add or subtract pz_d(31) pz_m(44) pz_s(3) pz_d(31) + pz_m(44) pz_d(-31) - pz_m(44) pz_d(-31) + pz_m(44) + pz_s(59) pz_d(31) - pz_m(44) + pz_s(59) pz_d(-121) + pz_m(1) + pz_s(33) unclass(pz_d(31) + pz_m(44) + pz_s(59)) }"},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":null,"dir":"Reference","previous_headings":"","what":"get hemisphere from long/lat coordinates — parse_hemisphere","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"BEWARE: EXPERIMENTAL","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"","code":"parse_hemisphere(lon, lat)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"lon (character/numeric/integer) one longitude values lat (character/numeric/integer) one latitude values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"character vector quadrants, one : NE, NW, SE, SW. one coordinate values invalid, one valid, get length 1 string. coordinate values bad, get zero length string. Warnings thrown invalid values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"length(lon) == length(lat)","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_hemisphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get hemisphere from long/lat coordinates — parse_hemisphere","text":"","code":"# NE parse_hemisphere(\"74.123E\", \"45N54.2356\") #> [1] \"NE\" if (FALSE) { # NW parse_hemisphere(-120, 40.4183318) # SW parse_hemisphere(-120, -40.4183318) # SE parse_hemisphere(120, -40.4183318)  # bad inputs, get one of the two strings parse_hemisphere(-181, -40.4183318) parse_hemisphere(-120, -192.4183318)  # many inputs n <- 100 lons <- runif(n, min = -180, max = 180) lats <- runif(n, min = -90, max = 90) parse_hemisphere(lons, lats) }"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse latitude values — parse_lat","title":"Parse latitude values — parse_lat","text":"Parse latitude values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse latitude values — parse_lat","text":"","code":"parse_lat(lat, format = NULL)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse latitude values — parse_lat","text":"lat (numeric/integer/character) one latitude values format (character) format, default often works","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse latitude values — parse_lat","text":"numeric vector","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Parse latitude values — parse_lat","text":"Throws warnings parsing errors, returns NaN case Types errors: invalid argument: e.g., letters passed instead numbers, see https://en.cppreference.com/w/cpp/error/invalid_argument range: numbers acceptable range, see https://en.cppreference.com/w/cpp/error/out_of_range latitude range: within -90/90 range","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse latitude values — parse_lat","text":"","code":"parse_lat(\"\") #> [1] NaN if (FALSE) { parse_lat(\"-91\") parse_lat(\"95\") parse_lat(\"asdfaf\")  parse_lat(\"45\") parse_lat(\"-45\") parse_lat(\"-45.2323\")  # out of range with std::stod? parse_lat(\"-45.23232e24\") parse_lat(\"-45.23232e2\")  # numeric input parse_lat(1:10) parse_lat(85:94)  # different formats parse_lat(\"40.4183318 N\") parse_lat(\"40.4183318 S\") parse_lat(\"40 25 5.994\") # => 40.41833  parse_lat(\"40.4183318N\") parse_lat(\"N40.4183318\") parse_lat(\"40.4183318S\") parse_lat(\"S40.4183318\")  parse_lat(\"N 39 21.440\") # => 39.35733 parse_lat(\"S 56 1.389\") # => -56.02315  parse_lat(\"N40°25’5.994\") # => 40.41833 parse_lat(\"40° 25´ 5.994\\\" N\") # => 40.41833 parse_lat(\"40:25:6N\") parse_lat(\"40:25:5.994N\") parse_lat(\"40d 25’ 6\\\" N\") }"},{"path":"https://docs.ropensci.org/parzer/reference/parse_llstr.html","id":null,"dir":"Reference","previous_headings":"","what":"parse string with lat and lon together — parse_llstr","title":"parse string with lat and lon together — parse_llstr","text":"parse string lat lon together","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_llstr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse string with lat and lon together — parse_llstr","text":"","code":"parse_llstr(str)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_llstr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse string with lat and lon together — parse_llstr","text":"str (character) string latitude longitude, one vector.","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_llstr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse string with lat and lon together — parse_llstr","text":"data.frame parsed latitude longitude decimal degrees.","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_llstr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parse string with lat and lon together — parse_llstr","text":"","code":"parse_llstr(\"N 04.1683, E 101.5823\") #>      lat      lon #> 1 4.1683 101.5823 parse_llstr(\"N04.82344, E101.61320\") #>       lat      lon #> 1 4.82344 101.6132 parse_llstr(\"N 04.25164, E 101.70695\") #>       lat      lon #> 1 4.25164 101.7069 parse_llstr(\"N05.03062, E101.75172\") #>       lat      lon #> 1 5.03062 101.7517 parse_llstr(\"N05.03062,E101.75172\") #>       lat      lon #> 1 5.03062 101.7517 parse_llstr(\"N4.9196, E101.345\") #>      lat     lon #> 1 4.9196 101.345 parse_llstr(\"N4.9196, E101.346\") #>      lat     lon #> 1 4.9196 101.346 parse_llstr(\"N4.9196, E101.347\") #>      lat     lon #> 1 4.9196 101.347 # no comma parse_llstr(\"N4.9196 E101.347\") #>      lat     lon #> 1 4.9196 101.347 # no space parse_llstr(\"N4.9196E101.347\") #>   lat lon #> 1 NaN NaN  # DMS parse_llstr(\"N4 51'36\\\", E101 34'7\\\"\") #>    lat      lon #> 1 4.86 101.5686 parse_llstr(c(\"4 51'36\\\"S, 101 34'7\\\"W\", \"N4 51'36\\\", E101 34'7\\\"\")) #>     lat       lon #> 1 -4.86 -101.5686 #> 2  4.86  101.5686"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse longitude values — parse_lon","title":"Parse longitude values — parse_lon","text":"Parse longitude values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse longitude values — parse_lon","text":"","code":"parse_lon(lon, format = NULL)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse longitude values — parse_lon","text":"lon (numeric/integer/character) one longitude values format (character) format, default often works","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse longitude values — parse_lon","text":"numeric vector","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Parse longitude values — parse_lon","text":"Throws warnings parsing errors, returns NaN case Types errors: invalid argument: e.g., letters passed instead numbers, see https://en.cppreference.com/w/cpp/error/invalid_argument range: numbers acceptable range, see https://en.cppreference.com/w/cpp/error/out_of_range longitude range: within -180/360 range","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse longitude values — parse_lon","text":"","code":"parse_lon(\"\") #> [1] NaN if (FALSE) { parse_lon(\"-181\") parse_lon(\"-361\") parse_lon(\"95\") parse_lon(\"asdfaf\")  parse_lon(\"45\") parse_lon(\"-45\") parse_lon(\"-45.2323\") parse_lon(\"334\")  # out of range with std::stod? parse_lon(\"-45.23232e24\") parse_lon(\"-45.23232e2\") parse_lon(\"-45.23232\")  # numeric input parse_lon(1:10) parse_lon(85:94)  # different formats parse_lon(\"40.4183318 E\") parse_lon(\"40.4183318 W\") parse_lon(\"40 25 5.994\") # => 40.41833  parse_lon(\"40.4183318W\") parse_lon(\"W40.4183318\") parse_lon(\"E40.4183318\") parse_lon(\"40.4183318E\")  parse_lon(\"E 39 21.440\") # => 39.35733 parse_lon(\"W 56 1.389\") # => -56.02315  parse_lon(\"E40°25’5.994\") # => 40.41833 parse_lon(\"40° 25´ 5.994\\\" E\") # => 40.41833 parse_lon(\"40:25:6E\") parse_lon(\"40:25:5.994E\") parse_lon(\"40d 25’ 6\\\" E\") }"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":null,"dir":"Reference","previous_headings":"","what":"parse longitude and latitude — parse_lon_lat","title":"parse longitude and latitude — parse_lon_lat","text":"parse longitude latitude","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse longitude and latitude — parse_lon_lat","text":"","code":"parse_lon_lat(lon, lat)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse longitude and latitude — parse_lon_lat","text":"lon (character/numeric/integer) one longitude values lat (character/numeric/integer) one latitude values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse longitude and latitude — parse_lon_lat","text":"data.frame, columns lon, lat. invalid values, NA returned. addition, warnings thrown invalid values","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"parse longitude and latitude — parse_lon_lat","text":"length(lon) == length(lat)","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_lon_lat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parse longitude and latitude — parse_lon_lat","text":"","code":"parse_lon_lat(-120.43, 49.12) #>       lon   lat #> 1 -120.43 49.12 if (FALSE) { parse_lon_lat(-120.43, 93) parse_lon_lat(-190, 49.12) parse_lon_lat(240, 49.12) parse_lon_lat(-190, 92) # many lons <- c(\"45W54.2356\", \"181\", 45, 45.234234, \"-45.98739874\") lats <- c(\"40.123°\", \"40.123N74.123W\", \"191.89\", 12, \"N45 04.25764\") parse_lon_lat(lons, lats) }"},{"path":"https://docs.ropensci.org/parzer/reference/parse_parts.html","id":null,"dir":"Reference","previous_headings":"","what":"parse coordinates into degrees, minutes and seconds — parse_parts","title":"parse coordinates into degrees, minutes and seconds — parse_parts","text":"parse coordinates degrees, minutes seconds","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_parts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse coordinates into degrees, minutes and seconds — parse_parts","text":"","code":"parse_parts_lon(str)  parse_parts_lat(str)"},{"path":"https://docs.ropensci.org/parzer/reference/parse_parts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse coordinates into degrees, minutes and seconds — parse_parts","text":"str (character) string including longitude latitude","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_parts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse coordinates into degrees, minutes and seconds — parse_parts","text":"data.frame columns : deg (integer) min (integer) sec (numeric) NA/NaN given upon error","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parse_parts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parse coordinates into degrees, minutes and seconds — parse_parts","text":"","code":"parse_parts_lon(\"140.4183318\") #>   deg min      sec #> 1 140  25 6.005895 if (FALSE) { parse_parts_lon(\"174.6411133\") parse_parts_lon(\"-45.98739874\") parse_parts_lon(\"40.123W\")  parse_parts_lat(\"45N54.2356\") parse_parts_lat(\"40.4183318\") parse_parts_lat(\"-74.6411133\") parse_parts_lat(\"-45.98739874\") parse_parts_lat(\"40.123N\") parse_parts_lat(\"N40°25’5.994\")  # not working, needs format input parse_parts_lat(\"N455698735\")  # multiple x <- c(\"40.123°\", \"40.123N74.123W\", \"191.89\", 12, \"N45 04.25764\") parse_parts_lat(x) system.time(parse_parts_lat(rep(x, 10^2))) }"},{"path":"https://docs.ropensci.org/parzer/reference/parzer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"parzer — parzer-package","title":"parzer — parzer-package","text":"parse geographic coordinates","code":""},{"path":"https://docs.ropensci.org/parzer/reference/parzer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parzer — parzer-package","text":"Scott Chamberlain","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-041","dir":"Changelog","previous_headings":"","what":"parzer 0.4.1","title":"parzer 0.4.1","text":"CRAN release: 2021-12-20","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"minor-improvements-0-4-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"parzer 0.4.1","text":"documentation package description describe clearly parzer core objective parsing messy coordinates character strings convert decimal numeric values. Suggestion work @robitalec","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"acknowledgements-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"ACKNOWLEDGEMENTS CHANGES","title":"parzer 0.4.1","text":"new contributors package: @robitalec, @maelle @yutannihilation new maintainer: @AlbanSagouis","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-040","dir":"Changelog","previous_headings":"","what":"parzer 0.4.0","title":"parzer 0.4.0","text":"CRAN release: 2021-02-16","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"parzer 0.4.0","text":"performance improvement internal function scrub(), used exported functions parzer (#30) work @AlbanSagouis work around non-UTF8 MBCS locales: now exported functions go modified .Call() use withr::with_locale() user Windows operating system (#31) (#32) work @yutannihilation","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-030","dir":"Changelog","previous_headings":"","what":"parzer 0.3.0","title":"parzer 0.3.0","text":"CRAN release: 2020-10-13","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"parzer 0.3.0","text":"fix problem parse_llstr(): older R versions stringsAsFactors=TRUE default function returning strings factors internal function caused problem subsequent step function (#29)","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-020","dir":"Changelog","previous_headings":"","what":"parzer 0.2.0","title":"parzer 0.2.0","text":"CRAN release: 2020-10-07","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"parzer 0.2.0","text":"new contributor package @AlbanSagouis gains new function parse_llstr() parse string contains latitude longitude (#3) (#24) (#26) (#28) work @AlbanSagouis","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"parzer 0.2.0","text":"updated scrub() internal function strips certain characters include things scrub (#25) work @AlbanSagouis","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-014","dir":"Changelog","previous_headings":"","what":"parzer 0.1.4","title":"parzer 0.1.4","text":"CRAN release: 2020-03-29","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"minor-improvements-0-1-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"parzer 0.1.4","text":"add support internal function additional degree like symbols (#21) fix issue parse_parts_lat()/parse_parts_lon() functions NA causing warnings cpp side; cpp side, now check NA return list NAs instead NAs passing code (#23)","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"parzer-010","dir":"Changelog","previous_headings":"","what":"parzer 0.1.0","title":"parzer 0.1.0","text":"CRAN release: 2020-03-19","code":""},{"path":"https://docs.ropensci.org/parzer/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"parzer 0.1.0","text":"Released CRAN.","code":""}]
